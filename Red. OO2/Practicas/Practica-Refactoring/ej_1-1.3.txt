^^^
1.1 Protocolo de Cliente
La clase Cliente tiene el siguiente protocolo. ¿Cómo puede mejorarlo?
/**
* Retorna el límite de crédito del cliente
*/
protected double lmtCrdt() {...
/**
* Retorna el monto facturado al cliente desde la fecha f1 a la fecha f2
*/
protected double mtFcE(LocalDate f1, LocalDate f2) {...
/**
* Retorna el monto cobrado al cliente desde la fecha f1 a la fecha f2
*/
protected double mtCbE(LocalDate f1, LocalDate f2) {...

a) por que un cliente sabe su limite de credito? olor: clase grande, clase dios. Move Method.
b) los nombres de los metodos estan muy abreviados y son dificiles de comprender. Refactor: Rename Method.

###Codigo Refactorizado:

public abstract class CuentaDeCliente: ###Move Method
/**
* Retorna el límite de crédito del cliente
*/
protected double limiteDeCredito() {...} ###Rename Method

/**
* Retorna el monto facturado al cliente desde la fecha f1 a la fecha f2
*/
protected double montoFacturadoEntre(LocalDate f1, LocalDate f2) {...} ###Rename Method

/**
* Retorna el monto cobrado al cliente desde la fecha f1 a la fecha f2
*/
protected double montoCobradoEntre(LocalDate f1, LocalDate f2) {...} ###Rename Method


^^^
1.2 Participación en proyectos
Al revisar el siguiente diseño inicial (Figura 1), se decidió realizar un cambio para evitar lo
que se consideraba un mal olor. El diseño modificado se muestra en la Figura 2. Indique
qué tipo de cambio se realizó y si lo considera apropiado. Justifique su respuesta.

a) Se detecto envidia de atributo y violacion del encapsulamiento, se realizo un move method de Persona a Proyecto y un rename method para mantener la coherencia.
b) No estoy de acuerdo con la modificacion ya que modifica el comportamiento del programa. Se deberia habber hecho un extract method y luego un move method de manera
    de mantener el metodo en la clase Persona que simplemente le pida a la clase Proyecto que verifique si la persona participa en el proyecto.

^^^
1.3 Cálculos
Analice el código que se muestra a continuación. Indique qué defectos encuentra y cómo pueden corregirse.

    public void imprimirValores() {
        int totalEdades = 0;
        double promedioEdades = 0;
        double totalSalarios = 0;
        for (Empleado empleado : personal) {
            totalEdades = totalEdades + empleado.getEdad();
            totalSalarios = totalSalarios + empleado.getSalario();
        }
        promedioEdades = totalEdades / personal.size();
        String message = String.format("El promedio de las edades es %s y el total de salarios es %s", promedioEdades, totalSalarios);
        System.out.println(message);
    }

a) el metodo es muy grande y un poco dificil de seguir. Se podria hacer un extract method que simplifique los calculos que se realizan para imprimir...

codigo refactorizado:

    public void imprimirValores() {
        System.out.println("El promedio de las edades es %s y el total de salarios es %s", getPromedioEdades, getTotalSalarios);
    }

    public double getTotalSalarios() {
        return this.personal.stream.mapToDouble(Empleado empleado -> empleado.getSalario()).sum();
    }

    public int getCantEmpelados() {
        return this.personal().size();
    }

    public getPromedioEdades() {
        int totalEdades = this.personal.stream.map(Empleado empleado -> empleado.getEdad()).sum();
        return (double) totalEdades / this.getCantEmpelados();
    }