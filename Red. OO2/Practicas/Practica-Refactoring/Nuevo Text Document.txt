/**
* Retorna los Ãºltimos N posts que no pertenecen al usuario user
*/
	public List<Post> ultimosPosts(Usuario user, int cantidad) {
		List<Post> postsOtrosUsuarios = new ArrayList<Post>();
		for (Post post : this.posts) {
			if (!post.getUsuario().equals(user)) {
			postsOtrosUsuarios.add(post);
			}
		}
		// ordena los posts por fecha
		for (int i = 0; i < postsOtrosUsuarios.size(); i++) {
			int masNuevo = i;
			for(int j= i +1; j < postsOtrosUsuarios.size(); j++) {
				if (postsOtrosUsuarios.get(j).getFecha().isAfter(postsOtrosUsuarios.get(masNuevo).getFecha())) {
					masNuevo = j;
				}
			}
			Post unPost = postsOtrosUsuarios.set(i,postsOtrosUsuarios.get(masNuevo));
			postsOtrosUsuarios.set(masNuevo, unPost);
		}
		List<Post> ultimosPosts = new ArrayList<Post>();
		int index = 0;
		Iterator<Post> postIterator = postsOtrosUsuarios.iterator();
		while (postIterator.hasNext() && index < cantidad) {
			ultimosPosts.add(postIterator.next());
		}
		return ultimosPosts;
	}

i) Long Method
ii) Extract Method
iii)
	public List<Post> ultimosPosts(Usuario user, int cantidad) {
		return this.posts.quitarUsuario(user).ordenarPorFecha().obtenerPrimeros(cantidad);
	}
	
	public List<Post> quitarUsuario(Usuario user) {
		return this.post.stream.filter(p -> ! p.getUsuario.equals(user)).collect(Collectors.toList());
	}
	
	public List<Post> ordenarPorFecha() {
		return this.post.stream.sorted((p1, p2) p1.getFecha().compareTo(p2.getFecha())).collect(Collectors.toList());
	}
	
	public List<Post> obtenerPrimeros(int cantidad) {
		return this.post.stream.limit(cantidad).collect(Collectors.toList());
	}
